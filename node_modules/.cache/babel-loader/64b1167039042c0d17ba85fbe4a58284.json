{"ast":null,"code":"var _jsxFileName = \"/home/kakashi/Desktop/New Project/light-on/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport './button.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props); // TODO: set initial state\n\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n    this.newgame = this.newgame.bind(this);\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  createBoard() {\n    let board = []; // TODO: create array-of-arrays of true/false values\n\n    for (let y = 0; y < this.props.nRows; y++) {\n      let row = [];\n\n      for (let x = 0; x < this.props.nCol; x++) {\n        let val = Math.random() <= this.props.prob ? true : false;\n        row.push(val);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  }\n  /** handle changing a cell: update board & determine if winner */\n\n\n  flipCellsAround(coord) {\n    // console.log(coord +\" Fliping\");\n    //let {ncols, nrows} = this.props;\n    let ncols = this.props.nCol;\n    let nrows = this.props.nRows; // console.log(nrows + \" \" + ncols); \n\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    } // TODO: flip this cell and the cells around it\n    //board[y][x] = !board[y][x];\n\n\n    flipCell(x, y);\n    flipCell(y + 1, x);\n    flipCell(y - 1, x);\n    flipCell(y, x + 1);\n    flipCell(y, x - 1); //flipCell(10,20);\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\\\n\n    function haswon() {\n      for (let i = 0; i < nrows; i++) {\n        for (let j = 0; j < ncols; j++) {\n          if (board[i][j] === true) return false;\n        }\n      }\n\n      return true;\n    }\n\n    this.setState({\n      board,\n      hasWon: haswon()\n    });\n  }\n  /** Render game board or winning message. */\n\n\n  newgame() {\n    this.setState({\n      board: this.createBoard(),\n      hasWon: false\n    });\n  }\n\n  render() {\n    if (this.state.hasWon) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"neon-blue\",\n          children: \"Congrats !! You turn off all light\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.newgame,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 10\n      }, this);\n    } // if the game is won, just show a winning msg & render nothing else\n    // TODO\n    // make table board\n    // TODO\n\n\n    let mytable = [];\n\n    for (let y = 0; y < this.props.nRows; y++) {\n      let row = [];\n\n      for (let x = 0; x < this.props.nCol; x++) {\n        let k = `${y}-${x}`;\n        row.push( /*#__PURE__*/_jsxDEV(Cell, {\n          isLit: this.state.board[y][x],\n          flipCellsAroundMe: () => this.flipCellsAround(k)\n        }, k, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 18\n        }, this));\n      }\n\n      mytable.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row\n      }, y, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 20\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"neon-orange\",\n        children: \" Lights\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Board\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: mytable\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nBoard.defaultProps = {\n  nRows: 5,\n  nCol: 5,\n  prob: 0.01\n};\nexport default Board;","map":{"version":3,"sources":["/home/kakashi/Desktop/New Project/light-on/src/Board.js"],"names":["React","Component","Cell","Board","constructor","props","state","hasWon","board","createBoard","newgame","bind","y","nRows","row","x","nCol","val","Math","random","prob","push","flipCellsAround","coord","ncols","nrows","split","map","Number","flipCell","haswon","i","j","setState","render","mytable","k","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport './button.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows : 5,\n    nCol : 5,\n    prob : 0.01\n  }\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon : false,\n      board : this.createBoard()\n    }\n    this.newgame = this.newgame.bind(this);\n\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let y=0;y<this.props.nRows;y++)\n    {\n      let row = [];\n      for(let x=0;x<this.props.nCol;x++)\n      {\n        let val=Math.random() <= this.props.prob ? true : false;\n        row.push(val);\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n   // console.log(coord +\" Fliping\");\n    //let {ncols, nrows} = this.props;\n    let ncols=this.props.nCol;\n    let nrows=this.props.nRows;\n   // console.log(nrows + \" \" + ncols); \n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    \n\n    function flipCell(y, x) {\n    \n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n\n        board[y][x] = !board[y][x];\n\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n     \n      //board[y][x] = !board[y][x];\n      flipCell(x,y);\n      flipCell(y+1,x);\n     flipCell(y-1,x);\n     flipCell(y,x+1);\n     flipCell(y,x-1);\n     //flipCell(10,20);\n    // win when every cell is turned off\n  \n    // TODO: determine is the game has been won\\\n    function haswon()\n    {\n      for(let i=0;i<nrows;i++)\n      {\n        for(let j=0;j<ncols;j++)\n        {\n          if(board[i][j]===true) return false;\n        }\n      }\n      return true;\n    }\n     \n    this.setState({board, hasWon : haswon()});\n  }\n   \n\n  /** Render game board or winning message. */\n  newgame(){\n     this.setState({board : this.createBoard() ,hasWon : false});\n  }\n  render() {\n     if(this.state.hasWon)\n     {\n       return (\n         <div>\n          <h1 className=\"neon-blue\">Congrats !! You turn off all light</h1>\n          <button onClick={this.newgame}>New Game</button>\n          </div>\n\n       )\n     }\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n    let mytable=[];\n    for(let y=0;y<this.props.nRows;y++)\n    {\n      let row=[];\n      for(let x=0;x<this.props.nCol;x++)\n      {\n        let k=`${y}-${x}`;\n        row.push(<Cell key={k} isLit={this.state.board[y][x]} flipCellsAroundMe={()=>this.flipCellsAround(k)}/>);\n      }\n      mytable.push(<tr key={y}>{row}</tr> );\n\n    }\n    return(\n      <div>\n        <h1 className=\"neon-orange\"> Lights</h1>\n      <table className=\"Board\">\n        <tbody>\n          {mytable}\n        </tbody>\n      </table>\n      </div>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}