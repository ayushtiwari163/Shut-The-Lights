{"ast":null,"code":"import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  constructor(props) {\n    super(props); // TODO: set initial state\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  createBoard() {\n    let board = []; // TODO: create array-of-arrays of true/false values\n\n    return board;\n  }\n  /** handle changing a cell: update board & determine if winner */\n\n\n  flipCellsAround(coord) {\n    let {\n      ncols,\n      nrows\n    } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    } // TODO: flip this cell and the cells around it\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n\n    this.setState({\n      board,\n      hasWon\n    });\n  }\n  /** Render game board or winning message. */\n\n\n  render() {// if the game is won, just show a winning msg & render nothing else\n    // TODO\n    // make table board\n    // TODO\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/kakashi/Desktop/New Project/light-on/src/Board.js"],"names":["React","Component","Cell","Board","constructor","props","createBoard","board","flipCellsAround","coord","ncols","nrows","state","y","x","split","map","Number","flipCell","setState","hasWon","render"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAE5BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;AACD;AAED;;;AAEAC,EAAAA,WAAW,GAAG;AACZ,QAAIC,KAAK,GAAG,EAAZ,CADY,CAEZ;;AACA,WAAOA,KAAP;AACD;AAED;;;AAEAC,EAAAA,eAAe,CAACC,KAAD,EAAQ;AACrB,QAAI;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAiB,KAAKN,KAA1B;AACA,QAAIE,KAAK,GAAG,KAAKK,KAAL,CAAWL,KAAvB;AACA,QAAI,CAACM,CAAD,EAAIC,CAAJ,IAASL,KAAK,CAACM,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAAb;;AAGA,aAASC,QAAT,CAAkBL,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AAEA,UAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGJ,KAAd,IAAuBG,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGF,KAAzC,EAAgD;AAC9CJ,QAAAA,KAAK,CAACM,CAAD,CAAL,CAASC,CAAT,IAAc,CAACP,KAAK,CAACM,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,KAZoB,CAcrB;AAEA;AACA;;;AAEA,SAAKK,QAAL,CAAc;AAACZ,MAAAA,KAAD;AAAQa,MAAAA;AAAR,KAAd;AACD;AAGD;;;AAEAC,EAAAA,MAAM,GAAG,CAEP;AAEA;AAEA;AAEA;AACD;;AApD2B;;AAwD9B,eAAelB,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}