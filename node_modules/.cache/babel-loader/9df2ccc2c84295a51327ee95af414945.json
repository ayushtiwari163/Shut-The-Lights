{"ast":null,"code":"import _slicedToArray from\"/home/kakashi/Desktop/Shut-The-Lights/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/home/kakashi/Desktop/Shut-The-Lights/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/kakashi/Desktop/Shut-The-Lights/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/kakashi/Desktop/Shut-The-Lights/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/kakashi/Desktop/Shut-The-Lights/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/kakashi/Desktop/Shut-The-Lights/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import Cell from\"./Cell\";import'./Board.css';import'./button.css';/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Board=/*#__PURE__*/function(_Component){_inherits(Board,_Component);var _super=_createSuper(Board);function Board(props){var _this;_classCallCheck(this,Board);_this=_super.call(this,props);// TODO: set initial state\n_this.state={hasWon:false,board:_this.createBoard()};_this.newgame=_this.newgame.bind(_assertThisInitialized(_this));return _this;}/** create a board nrows high/ncols wide, each cell randomly lit or unlit */_createClass(Board,[{key:\"createBoard\",value:function createBoard(){var board=[];// TODO: create array-of-arrays of true/false values\nfor(var y=0;y<this.props.nRows;y++){var row=[];for(var x=0;x<this.props.nCol;x++){var val=Math.random()<=this.props.prob?true:false;row.push(val);}board.push(row);}return board;}/** handle changing a cell: update board & determine if winner */},{key:\"flipCellsAround\",value:function flipCellsAround(coord){// console.log(coord +\" Fliping\");\n//let {ncols, nrows} = this.props;\nvar ncols=this.props.nCol;var nrows=this.props.nRows;// console.log(nrows + \" \" + ncols); \nvar board=this.state.board;var _coord$split$map=coord.split(\"-\").map(Number),_coord$split$map2=_slicedToArray(_coord$split$map,2),y=_coord$split$map2[0],x=_coord$split$map2[1];function flipCell(y,x){if(x>=0&&x<ncols&&y>=0&&y<nrows){board[y][x]=!board[y][x];}}// TODO: flip this cell and the cells around it\n//board[y][x] = !board[y][x];\nflipCell(x,y);flipCell(y+1,x);flipCell(y-1,x);flipCell(y,x+1);flipCell(y,x-1);//flipCell(10,20);\n// win when every cell is turned off\n// TODO: determine is the game has been won\\\nfunction haswon(){for(var i=0;i<nrows;i++){for(var j=0;j<ncols;j++){if(board[i][j]===true)return false;}}return true;}this.setState({board:board,hasWon:haswon()});}/** Render game board or winning message. */},{key:\"newgame\",value:function newgame(){this.setState({board:this.createBoard(),hasWon:false});}},{key:\"render\",value:function render(){var _this2=this;if(this.state.hasWon){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"neon-blue\",children:\"Congrats !! You turn off all light\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn-7\",onClick:this.newgame,children:\"New Game\"})]});}// if the game is won, just show a winning msg & render nothing else\n// TODO\n// make table board\n// TODO\nvar mytable=[];for(var y=0;y<this.props.nRows;y++){var row=[];var _loop=function _loop(x){var k=\"\".concat(y,\"-\").concat(x);row.push(/*#__PURE__*/_jsx(Cell,{isLit:_this2.state.board[y][x],flipCellsAroundMe:function flipCellsAroundMe(){return _this2.flipCellsAround(k);}},k));};for(var x=0;x<this.props.nCol;x++){_loop(x);}mytable.push(/*#__PURE__*/_jsx(\"tr\",{children:row},y));}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"neon-orange\",children:\" SHUT THE LIGHTS\"}),/*#__PURE__*/_jsx(\"table\",{className:\"Board\",children:/*#__PURE__*/_jsx(\"tbody\",{children:mytable})})]});}}]);return Board;}(Component);Board.defaultProps={nRows:5,nCol:5,prob:0};export default Board;","map":{"version":3,"sources":["/home/kakashi/Desktop/Shut-The-Lights/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","newgame","bind","y","nRows","row","x","nCol","val","Math","random","prob","push","coord","ncols","nrows","split","map","Number","flipCell","haswon","i","j","setState","mytable","k","flipCellsAround","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport './button.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows : 5,\n    nCol : 5,\n    prob : 0\n  }\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon : false,\n      board : this.createBoard()\n    }\n    this.newgame = this.newgame.bind(this);\n\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let y=0;y<this.props.nRows;y++)\n    {\n      let row = [];\n      for(let x=0;x<this.props.nCol;x++)\n      {\n        let val=Math.random() <= this.props.prob ? true : false;\n        row.push(val);\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n   // console.log(coord +\" Fliping\");\n    //let {ncols, nrows} = this.props;\n    let ncols=this.props.nCol;\n    let nrows=this.props.nRows;\n   // console.log(nrows + \" \" + ncols); \n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    \n\n    function flipCell(y, x) {\n    \n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n\n        board[y][x] = !board[y][x];\n\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n     \n      //board[y][x] = !board[y][x];\n      flipCell(x,y);\n      flipCell(y+1,x);\n     flipCell(y-1,x);\n     flipCell(y,x+1);\n     flipCell(y,x-1);\n     //flipCell(10,20);\n    // win when every cell is turned off\n  \n    // TODO: determine is the game has been won\\\n    function haswon()\n    {\n      for(let i=0;i<nrows;i++)\n      {\n        for(let j=0;j<ncols;j++)\n        {\n          if(board[i][j]===true) return false;\n        }\n      }\n      return true;\n    }\n     \n    this.setState({board, hasWon : haswon()});\n  }\n   \n\n  /** Render game board or winning message. */\n  newgame(){\n     this.setState({board : this.createBoard() ,hasWon : false});\n  }\n  render() {\n     if(this.state.hasWon)\n     {\n       return (\n         <div>\n          <h1 className=\"neon-blue\">Congrats !! You turn off all light</h1>\n          <button className=\"btn-7\" onClick={this.newgame}>New Game</button>\n          </div>\n\n       )\n     }\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n    let mytable=[];\n    for(let y=0;y<this.props.nRows;y++)\n    {\n      let row=[];\n      for(let x=0;x<this.props.nCol;x++)\n      {\n        let k=`${y}-${x}`;\n        row.push(<Cell key={k} isLit={this.state.board[y][x]} flipCellsAroundMe={()=>this.flipCellsAround(k)}/>);\n      }\n      mytable.push(<tr key={y}>{row}</tr> );\n\n    }\n    return(\n      <div>\n        <h1 className=\"neon-orange\"> SHUT THE LIGHTS</h1>\n      <table className=\"Board\">\n        <tbody>\n          {mytable}\n        </tbody>\n      </table>\n      </div>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}