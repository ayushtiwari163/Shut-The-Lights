{"ast":null,"code":"var _jsxFileName = \"/home/kakashi/Desktop/New Project/light-on/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props); // TODO: set initial state\n\n    this.state = {\n      hasWon: true,\n      board: this.createBoard()\n    };\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  createBoard() {\n    let board = []; // TODO: create array-of-arrays of true/false values\n\n    for (let y = 0; y < this.props.nRows; y++) {\n      let row = [];\n\n      for (let x = 0; x < this.props.nCol; x++) {\n        let val = Math.random() <= this.props.prob ? true : false;\n        row.push(val);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  }\n  /** handle changing a cell: update board & determine if winner */\n\n\n  flipCellsAround(coord) {\n    console.log(\"flipng\");\n    console.log(coord);\n    let {\n      ncols,\n      nrows\n    } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    } // TODO: flip this cell and the cells around it\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    //this.setState({board, hasWon});\n\n  }\n  /** Render game board or winning message. */\n\n\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n    // TODO\n    // make table board\n    // TODO\n    let mytable = [];\n\n    for (let y = 0; y < this.props.nRows; y++) {\n      let row = [];\n\n      for (let x = 0; x < this.props.nCol; x++) {\n        let k = `${y}-${x}`;\n        row.push( /*#__PURE__*/_jsxDEV(Cell, {\n          isLit: this.state.board[y][x],\n          flipCellsAroundMe: () => this.flipCellsAround(k)\n        }, k, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 18\n        }, this));\n      }\n\n      mytable.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row\n      }, y, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 20\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: mytable\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nBoard.defaultProps = {\n  nRows: 5,\n  nCol: 5,\n  prob: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/home/kakashi/Desktop/New Project/light-on/src/Board.js"],"names":["React","Component","Cell","Board","constructor","props","state","hasWon","board","createBoard","y","nRows","row","x","nCol","val","Math","random","prob","push","flipCellsAround","coord","console","log","ncols","nrows","split","map","Number","flipCell","render","mytable","k","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows : 5,\n    nCol : 5,\n    prob : 0.25\n  }\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon : true,\n      board : this.createBoard()\n    }\n\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let y=0;y<this.props.nRows;y++)\n    {\n      let row = [];\n      for(let x=0;x<this.props.nCol;x++)\n      {\n        let val=Math.random() <= this.props.prob ? true : false;\n        row.push(val);\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    console.log(\"flipng\");\n    console.log(coord);\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    //this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n    let mytable=[];\n    for(let y=0;y<this.props.nRows;y++)\n    {\n      let row=[];\n      for(let x=0;x<this.props.nCol;x++)\n      {\n        let k=`${y}-${x}`;\n        row.push(<Cell key={k} isLit={this.state.board[y][x]} flipCellsAroundMe={()=>this.flipCellsAround(k)}/>);\n      }\n      mytable.push(<tr key={y}>{row}</tr> );\n\n    }\n    return(\n      <table className=\"Board\">\n        <tbody>\n          {mytable}\n        </tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}